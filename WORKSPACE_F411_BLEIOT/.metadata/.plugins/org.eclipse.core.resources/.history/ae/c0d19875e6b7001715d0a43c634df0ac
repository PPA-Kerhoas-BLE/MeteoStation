#include <stdio.h>
#include <math.h>
#include <limits.h>
#include "TargetFeatures.h"
#include "main.h"

#include "sensor_service.h"
#include "bluenrg_utils.h"
#include "drv_uart.h"

#define USE_STM32F4XX_NUCLEO 1
#define BLUEMSYS_N_BUTTON_PRESS 3
#define BLUEMSYS_CHECK_CALIBRATION ((uint32_t)0x12345678)

extern uint8_t set_connectable;
extern int connected;

uint32_t ConnectionBleStatus  =0;
uint32_t ForceReCalibration    =0;
uint32_t FirstConnectionConfig =0;
uint8_t BufferToWrite[256];
int32_t BytesToWrite;
TIM_HandleTypeDef    TimCCHandle;
TIM_HandleTypeDef    TimEnvHandle;
uint8_t bdaddr[6];
uint32_t uhCCR1_Val = DEFAULT_uhCCR1_Val;
uint32_t uhCCR4_Val = DEFAULT_uhCCR4_Val;
uint32_t CalibrationData[30];

static volatile int ButtonPressed        =0;
static volatile uint32_t HCI_ProcessEvent=0;
static volatile uint32_t SendEnv         =0;

static CRC_HandleTypeDef hcrc;
unsigned char isCal = 0;

static void SystemClock_Config(void);
static void Init_BlueNRG_Custom_Services(void);
static void Init_BlueNRG_Stack(void);
static void MX_CRC_Init(void);
static void InitTimers(void);
static void SendEnvironmentalData(void);
static void ButtonCallback(void);

uint32_t t_coin=0;

//==================================================================
//~~~~~~~~~~~~~~~~~~~~~~~~~~  MAIN  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//==================================================================

int i=0;

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  InitTargetPlatform(TARGET_NUCLEO);
  uart2_Init();
  MX_CRC_Init();

  Init_BlueNRG_Stack();
  Init_BlueNRG_Custom_Services();

  InitTimers();

  while (1)
  {
	  	  //-------------------------------------------------------------------------------
	  	  // 		LED Blinking : No Client Connected
	  	  //-------------------------------------------------------------------------------
			if(!connected)
			{
					  if(!TargetBoardFeatures.LedStatus)
					  {
							if(!(HAL_GetTick()&0x3FF))
							{
							  LedOnTargetPlatform();
							}
					  }
					  else
					  {
							if(!(HAL_GetTick()&0x3F))
							{
							  LedOffTargetPlatform();
							}
					  }
			}
			//-------------------------------------------------------------------------------
			if(set_connectable)
			{
			// Now update the BLE advertize data and make the Board connectable
			  setConnectable();
			  set_connectable = FALSE;
			}

			// Handle BLE Event
			if(HCI_ProcessEvent)
			{
			  HCI_ProcessEvent=0;
			  HCI_Process();
			}

			// Handle user button
			if(ButtonPressed)
			{
			  ButtonCallback();
			  ButtonPressed=0;
			}

			// Environmental Data
			if(SendEnv) {
			  SendEnv=0;
			  SendEnvironmentalData();
			}

			// Wait for Event
			__WFI();
  }
}

//==================================================================
//   Period elapsed callback in non blocking mode for Environmental timer
//==================================================================

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if(htim == (&TimEnvHandle))
  {
    // Environmental
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV))
    {
    	SendEnv=1;
    }
  }
}
//=================================================================
static void ButtonCallback(void)
{
  if(connected)
  {
      term_printf("UserButton Pressed\r\n");
  }
}
//=====================================================================================
//			 Send Environmetal Data (Temperature/Pressure/Humidity) to BLE
//=====================================================================================

static void SendEnvironmentalData(void)
{
  uint8_t Status;

  /* Pressure,Humidity, and Temperatures*/
  if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_ENV))
  {
    float SensorValue;
    int32_t PressToSend=0;
    uint16_t HumToSend=0;
    int16_t Temp2ToSend=0,Temp1ToSend=0;
    int32_t decPart, intPart;

/*
   	BSP_PRESSURE_Get_Press(TargetBoardFeatures.HandlePressSensor,(float *)&SensorValue);
   	MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
   	PressToSend=intPart*100+decPart;*/


    BSP_HUMIDITY_Get_Hum(TargetBoardFeatures.HandleHumSensor,(float *)&SensorValue);
   	MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
   	HumToSend = intPart*10+decPart;

   	BSP_TEMPERATURE_Get_Temp(TargetBoardFeatures.HandleTempSensors[0],(float *)&SensorValue);
   	MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
   	Temp1ToSend = intPart*10+decPart;
/*
   	BSP_TEMPERATURE_Get_Temp(TargetBoardFeatures.HandleTempSensors[1],(float *)&SensorValue);
   	MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
   	Temp2ToSend = intPart*10+decPart;
*/
   	Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
    }

}

//======================================================================================
static void MX_CRC_Init(void)
{
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
}
//======================================================================================
static void InitTimers(void)
{
  uint32_t uwPrescalerValue;
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 2000) - 1);

  TimEnvHandle.Instance = TIM4;
  TimEnvHandle.Init.Period = 50*20 - 1;
  TimEnvHandle.Init.Prescaler = uwPrescalerValue;
  TimEnvHandle.Init.ClockDivision = 0;
  TimEnvHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimEnvHandle) != HAL_OK) {
  }
}
//======================================================================================
// Init BlueNRG Stack
//======================================================================================
static void Init_BlueNRG_Stack(void)
{
  const char BoardName[8] = {NAME_BLUEMS,0};
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  int ret;
  uint8_t  hwVersion;
  uint16_t fwVersion;

  HCI_Init();
  BlueNRG_RST();
  getBlueNRGVersion(&hwVersion, &fwVersion);

  //------------------------------------------------------------------------------------
  //	hwversion
  //------------------------------------------------------------------------------------
  if (hwVersion > 0x30)
  {
    // X-NUCLEO-IDB05A1 expansion board is used
    TargetBoardFeatures.bnrg_expansion_board = IDB05A1;
  }
  else
  {
    term_printf("Bad BlueNRG hwversion \n\r");
  }
  //------------------------------------------------------------------------------------
  /*
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */

  BlueNRG_RST();


 /**/

#ifdef USE_PUBLIC_ADDRESS

  bdaddr[5] = 0x02;
  bdaddr[4] = 0x80;
  bdaddr[3] = 0xE1;
  bdaddr[2] = 0x00;
  bdaddr[1] = 0x00;
  bdaddr[0] = 0xAB;

  ret = aci_hal_write_config_data(0,6,bdaddr);

  if(ret){
	  term_printf("Setting BD_ADDR failed 0x%02x.\n", ret);
  }

#else

  // Create a Unique BLE MAC Related to STM32 UID
  {
     bdaddr[0] = (STM32_UUID[1]>>24)&0xFF;
     bdaddr[1] = (STM32_UUID[0]    )&0xFF;
     bdaddr[2] = (STM32_UUID[2] >>8)&0xFF;
     bdaddr[3] = (STM32_UUID[0]>>16)&0xFF;

     // if IDB05A1 = Number between 100->199
     // if IDB04A1 = Number between 0->99
     // where Y == (MOTENV1_VERSION_MAJOR + MOTENV1_VERSION_MINOR)&0xF
     bdaddr[4] = (hwVersion > 0x30) ?
          ((((MOTENV1_VERSION_MAJOR-48)*10) + (MOTENV1_VERSION_MINOR-48)+100)&0xFF) :
          ((((MOTENV1_VERSION_MAJOR-48)*10) + (MOTENV1_VERSION_MINOR-48)    )&0xFF) ;
     bdaddr[5] = 0xC0; // for a Legal BLE Random MAC
   }

#endif

  //------------------------------------------------------------------------------------
  //	ACI GATT INIT
  //------------------------------------------------------------------------------------
  ret = aci_gatt_init();    
							  if(ret) { term_printf("\r\n GATT_Init failed \r\n"); goto fail;}
  //------------------------------------------------------------------------------------
  //	ACI GAP INIT
  //------------------------------------------------------------------------------------
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);

  	  	  	  	  	  	  	  if(ret) { term_printf("\r\n GAP_Init failed \r\n"); goto fail;}
  //------------------------------------------------------------------------------------

#ifndef USE_PUBLIC_ADDRESS

  ret = hci_le_set_random_address(bdaddr);

  	  	  	  	  	  	  	  if(ret) { term_printf("\r\n Setting the Static Random BD_ADDR failed \r\n"); goto fail;}
#endif
  //------------------------------------------------------------------------------------
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, 7/*strlen(BoardName)*/, (uint8_t *)BoardName);

  	  	  	  	  	  	  	  if(ret) { term_printf("\r\n aci_gatt_update_char_value failed \r\n"); goto fail;}
  //------------------------------------------------------------------------------------
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
                                     OOB_AUTH_DATA_ABSENT,
                                     NULL, 7, 16,
                                     USE_FIXED_PIN_FOR_PAIRING, 123456,
                                     BONDING);

	  	  	  	  	  	  	  if(ret) { term_printf("\r\n GAP setting Authentication failed \r\n"); goto fail;}
  //-------------------------------------------------------------------------------------
  term_printf("SERVER: BLE Stack Initialized \r\n"
		 "\t\tBoard type=%s HWver=%d, FWver=%d.%d.%c\r\n"
         "\t\tBoardName= %s\r\n"
         "\t\tBoardMAC = %x:%x:%x:%x:%x:%x\r\n\n",
         (TargetBoardFeatures.bnrg_expansion_board==IDB05A1) ? "IDB05A1" : "IDB04A1",
         hwVersion,
         fwVersion>>8,
         (fwVersion>>4)&0xF,
         (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a',
         BoardName,
         bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);

  aci_hal_set_tx_power_level(1,4);
  return;

fail:
  return;
}
//==============================================================================================
//		ADD HARDWARE SERVICES
//==============================================================================================

static void Init_BlueNRG_Custom_Services(void)
{
  int ret;
  
  ret = Add_HWServW2ST_Service();		// HARDWARE SERVICE
			  if(ret == BLE_STATUS_SUCCESS)
			  {
				 term_printf("HW      Service W2ST added successfully\r\n");
			  }
			  else
			  {
				 term_printf("\r\n Error while adding HW Service W2ST \r\n");
			  }
}
//======================================================================================
void SystemClock_Config(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 256;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
}
//======================================================================================
void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
  while((HAL_GetTick() - tickstart) < Delay)
  {
    __WFI();
  }
}
//======================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
  switch(GPIO_Pin){

    case SPI1_CMN_DEFAULT_IRQ_PIN:
    	HCI_Isr();
    	HCI_ProcessEvent=1;
    break;

    case KEY_BUTTON_PIN:
    	ButtonPressed = 1;
    break;

    default : break;
  }
}
//======================================================================================
void Error_Handler(void)
{
  while(1)
  {}
}
//======================================================================================
