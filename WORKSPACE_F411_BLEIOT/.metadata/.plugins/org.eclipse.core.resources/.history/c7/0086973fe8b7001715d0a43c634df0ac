#include <stdio.h>
#include "TargetFeatures.h"
#include "main.h"
#include "drv_uart.h"

#define STM32F401xE 1

#include "sensor_service.h"
#include "bluenrg_utils.h"
#include "bluenrg_l2cap_aci.h"
#include "uuid_ble_service.h"

#define ACI_GATT_UPDATE_CHAR_VALUE safe_aci_gatt_update_char_value

int connected = FALSE;
uint8_t set_connectable = TRUE;

extern uint32_t ConnectionBleStatus;
extern uint32_t ForceReCalibration;
extern uint32_t FirstConnectionConfig;

extern TIM_HandleTypeDef    TimEnvHandle;
extern uint8_t bdaddr[6];

static uint16_t HWServW2STHandle;
static uint16_t EnvironmentalCharHandle;

static uint16_t ledServiceHandle;
static uint16_t switchLedCharHandle;
static uint16_t stateLedCharHandle;

static uint16_t HumidityCharHandle;
static uint16_t TemperatureCharHandle;
static uint16_t PressionCharHandle;

static uint16_t StdErrCharHandle;

static uint32_t SizeOfUpdateBlueFW=0;
static uint16_t connection_handle = 0;

static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle);
static void GAP_DisconnectionComplete_CB(void);

//=============================================================================================
//				Add the HW FEATURE SERVICE using a vendor specific profile
//=============================================================================================
tBleStatus Add_HWServW2ST_Service(void)
{
	tBleStatus ret;
	uint8_t primary_short_uuid[2];

	HAL_Delay(1000); // !! Delay important, sinon les modifs de services/chars ne sont pas prises en compte.
	//-----------------------------------------------------------------------------------------
	// Light switch service 0xFF10
	STORE_LE_16(primary_short_uuid, 0xFF10);
	ret = aci_gatt_add_serv(UUID_TYPE_16,  primary_short_uuid, PRIMARY_SERVICE,
	                          13,&ledServiceHandle);
	if (ret != BLE_STATUS_SUCCESS) {	goto fail;}
	HAL_Delay(100);

	// SWITCH LED CHARACTERISTIC : 0xFF12
	STORE_LE_16(primary_short_uuid, 0xFF12);
	ret =  aci_gatt_add_char(ledServiceHandle, UUID_TYPE_16, primary_short_uuid, 1,
												CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP,
					                           ATTR_PERMISSION_NONE,
											   GATT_NOTIFY_ATTRIBUTE_WRITE  ,
					                           16, 0, &switchLedCharHandle);
	if (ret != BLE_STATUS_SUCCESS) {	goto fail;}
	HAL_Delay(100);

	// STATE LED CHARACTERISTIC : 0xFF11
	STORE_LE_16(primary_short_uuid, 0xFF11);
	ret =  aci_gatt_add_char(ledServiceHandle, UUID_TYPE_16, primary_short_uuid, 2,
					                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
					                           ATTR_PERMISSION_NONE,
					                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
					                           16, 0, &stateLedCharHandle);

	if (ret != BLE_STATUS_SUCCESS) {	goto fail;}
	HAL_Delay(100);
	//-----------------------------------------------------------------------------------------
	//ENVIRONMENT SERVICE : 0x181A
	STORE_LE_16(primary_short_uuid, 0x181A);	// ENVIRONMENT SERVICE
	ret = aci_gatt_add_serv(UUID_TYPE_16,  primary_short_uuid, PRIMARY_SERVICE,
	                          13,&HWServW2STHandle);

	if (ret != BLE_STATUS_SUCCESS) {	goto fail;}
	HAL_Delay(100);

	// HUMIDITY CHAR : 0x2A6F
	STORE_LE_16(primary_short_uuid, 0x2A6F);
	ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_16, primary_short_uuid, 2,
					                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
					                           ATTR_PERMISSION_NONE,
					                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
					                           16, 0, &HumidityCharHandle);

	if (ret != BLE_STATUS_SUCCESS) {	goto fail;}
	HAL_Delay(100);

	// TEMPERATURE CHAR : 0x2A6E
	STORE_LE_16(primary_short_uuid, 0x2A6E);
	ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_16, primary_short_uuid, 2,
											    CHAR_PROP_NOTIFY|CHAR_PROP_READ,
											    ATTR_PERMISSION_NONE,
											    GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
											   16, 0, &TemperatureCharHandle);


	if (ret != BLE_STATUS_SUCCESS) {	goto fail;}


	// PRESSURE
/*
	STORE_LE_16(primary_short_uuid, 0x2A6D);
	ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_16, primary_short_uuid, 4,
											    CHAR_PROP_NOTIFY|CHAR_PROP_READ,
											    ATTR_PERMISSION_NONE,
											   GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
											   16, 0, &PressionCharHandle);

									if (ret != BLE_STATUS_SUCCESS) {	goto fail;}

*/
	 return BLE_STATUS_SUCCESS;

	 fail:	return BLE_STATUS_ERROR;

}

//=============================================================================================
/**
 * @brief  Update Environmental characteristic value
 * @param  int32_t Press Pressure in mbar
 * @param  uint16_t Hum humidity RH (Relative Humidity) in thenths of %
 * @param  int16_t Temp2 Temperature in tenths of degree second sensor
 * @param  int16_t Temp1 Temperature in tenths of degree first sensor
 * @retval tBleStatus   Status
 */
tBleStatus Environmental_Update(int32_t Press,uint16_t Hum,int16_t Temp2,int16_t Temp1)
{
  tBleStatus ret;

  uint8_t buff_Hum[2];
  uint8_t buff_Temp[2];
  uint8_t buff_Tick[2];

  STORE_LE_16(buff_Tick  ,(HAL_GetTick()>>3));

  STORE_LE_16(buff_Hum,Hum);
  ret = aci_gatt_update_char_value(HWServW2STHandle, HumidityCharHandle, 0, 2,buff_Hum);

  STORE_LE_16(buff_Temp,Temp1);
  ret = aci_gatt_update_char_value(HWServW2STHandle, TemperatureCharHandle, 0, 2,buff_Temp);

  if (ret != BLE_STATUS_SUCCESS) {    return BLE_STATUS_ERROR;  }
  return BLE_STATUS_SUCCESS;
}

//=========================================================================================
/**
 * @brief  Update LEDs characteristic value
 * @param  uint8_t LedStatus LEDs status 0/1 (off/on)
 * @retval tBleStatus   Status
 */
tBleStatus LED_Update(uint8_t LedStatus, uint8_t* data_buffer, uint8_t Nb_bytes)
{
  tBleStatus ret;
  uint8_t buff[1];

  buff[0] = LedStatus;
  if (LedStatus == 1)
  	  	  	  	  	  {
	  	  	  	  	  LedOffTargetPlatform();
	  	  	  	  	  buff[0]=0;
	  	  	  	  	  ret = aci_gatt_update_char_value(ledServiceHandle, stateLedCharHandle, 0, 1,buff);
  	  	  	  	  	  }
  else				  {
	  	  	  	  	  LedOnTargetPlatform();
  	  	  	  	  	  buff[0]=1;
  	  	  	  	  	  ret = aci_gatt_update_char_value(ledServiceHandle, stateLedCharHandle, 0, 1,buff);
  	  	  	  	  	  }

  if (ret != BLE_STATUS_SUCCESS)
  {
    term_printf("Error Updating led Char\r\n");
    return BLE_STATUS_ERROR;
  }
  for(int i = 0; i < Nb_bytes; i++)
  {
    term_printf("%d", data_buffer[i]);
  }
  return BLE_STATUS_SUCCESS;
}
//=============================================================================================
void setConnectable(void)
{
	char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_BLUEMS};

    hci_le_set_scan_resp_data(0,NULL);     // disable scan response
    aci_gap_set_discoverable(ADV_IND, 0, 0,
								#ifdef USE_PUBLIC_ADDRESS
    							PUBLIC_ADDR,
								#else
								STATIC_RANDOM_ADDR,
								#endif
    							 NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);
}
//=============================================================================================
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
  connection_handle = handle;

  term_printf("\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
  ConnectionBleStatus=0;
  ForceReCalibration     =0;
  FirstConnectionConfig  =0;
}
//=============================================================================================
static void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;

  // Make the device connectable again.
  set_connectable 		= TRUE;
  ConnectionBleStatus	= 0;
  ForceReCalibration 	= 0;
  FirstConnectionConfig = 0;

  // Reset for any problem during FOTA update
  SizeOfUpdateBlueFW = 0;
  if(HAL_TIM_Base_Stop_IT(&TimEnvHandle) != HAL_OK) { Error_Handler();}
}

//=============================================================================================
void Read_Request_CB(uint16_t handle)
{
  if(handle == EnvironmentalCharHandle + 1)
  {
	  term_printf("Read_Request_CB \n\r");
  }
  else

  if (handle == StdErrCharHandle + 1)
  {
	  //Stderr_Update_AfterRead(); // Send again the last packet for StdError
  }
  else

  //EXIT:
  if(connection_handle != 0)
    aci_gatt_allow_read(connection_handle);
}
//=============================================================================================
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length)
{
	if(attr_handle == HumidityCharHandle + 2)
	{
		term_printf("Humidity Char Handle \n\r");
		switch(att_data[0])
						{
						case 1 :	W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
									HAL_TIM_Base_Start_IT(&TimEnvHandle);
									break;
						case 0 :	W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
									HAL_TIM_Base_Stop_IT(&TimEnvHandle);
									break;
						default : 	break;
						}
	}
	else
	if (attr_handle == TemperatureCharHandle + 2)
	{
		term_printf("temperature char handle \n\r");
		switch(att_data[0])
						{
						case 1 :	W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
									HAL_TIM_Base_Start_IT(&TimEnvHandle);
									break;
						case 0 :	W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
									HAL_TIM_Base_Stop_IT(&TimEnvHandle);
									break;
						default : 	break;
						}
	}
	else
	if (attr_handle == stateLedCharHandle + 2)
	{
		  term_printf("STATE LED CHANGE : attr_handle ==  %d + 1 \n\r", stateLedCharHandle);
	}
	else
	if (attr_handle == switchLedCharHandle + 1)
	{
		  term_printf("SWITCH LED CHANGE : attr_handle ==  %d + 1 \n\r", switchLedCharHandle);
		  LED_Update(TargetBoardFeatures.LedStatus,att_data, data_length);
	}
	else
	if(attr_handle == StdErrCharHandle + 2)
	{
		term_printf("StdErrCharHandle \n\r");
		switch(att_data[0])
						{
						case 1 :	W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
									break;
						case 0 :	W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
									break;
						default : 	break;
						}
	}
	else
	 {
			if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
			{
			  BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
			}
			else
			{
			  term_printf("Notification UNKNOW handle\r\n");
			}
	  }
}

//===========================================================================================
void HCI_Event_CB(void *pckt)
{
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  //term_printf("HCI EVENT CB hci_pckt->type : %d / event_pckt->evt : %d  \n\r", hci_pckt->type, event_pckt->evt );

  if(hci_pckt->type != HCI_EVENT_PKT)
  {
    return;
  }
  
  switch(event_pckt->evt)
	  {

	  case EVT_DISCONN_COMPLETE:
						{
						  GAP_DisconnectionComplete_CB();
						}
						break;
	  case EVT_LE_META_EVENT:
						{
						 evt_le_meta_event *evt = (void *)event_pckt->data;
						 switch(evt->subevent)
						 {
						 	 case EVT_LE_CONN_COMPLETE:
						 	 	 {
								  evt_le_connection_complete *cc = (void *)evt->data;
								  GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
						 	 	  }
						 	 	  break;
								  }
						}
						break;
	  case EVT_VENDOR:
			{
				  evt_blue_aci *blue_evt = (void*)event_pckt->data;
				  //term_printf( "blue_evt->ecode : %d \n\r", blue_evt->ecode);
				  switch(blue_evt->ecode)
				  {
					  case EVT_BLUE_GATT_READ_PERMIT_REQ:
						{
						  evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
						  Read_Request_CB(pr->attr_handle);
						}
						break;
					  case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
					  {
						  evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
						  Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
					  }
						break;
				  }
			}
			break;
	  }
}
//===========================================================================================
