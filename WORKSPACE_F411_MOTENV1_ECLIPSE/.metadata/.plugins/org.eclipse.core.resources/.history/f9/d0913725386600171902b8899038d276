/**
  ******************************************************************************
  * @file    sensor_service.c
  * @author  Central LAB
  * @version V3.0.0
  * @date    12-May-2017
  * @brief   Add 4 bluetooth services using vendor specific profiles.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
#include <stdio.h>
#include "TargetFeatures.h"
#include "main.h"
#include "drv_uart.h"

#define STM32F401xE 1

#include "sensor_service.h"
#include "bluenrg_utils.h"
#include "bluenrg_l2cap_aci.h"
#include "uuid_ble_service.h"

int connected = FALSE;
uint8_t set_connectable = TRUE;

extern uint32_t ConnectionBleStatus;
extern uint32_t ForceReCalibration;
extern uint32_t FirstConnectionConfig;

extern TIM_HandleTypeDef    TimEnvHandle;
extern uint8_t bdaddr[6];



static uint16_t HWServW2STHandle;
static uint16_t EnvironmentalCharHandle;

static uint16_t HumidityCharHandle;
static uint16_t TemperatureCharHandle;
static uint16_t PressionCharHandle;

static uint16_t AccEventCharHandle;
static uint16_t LedCharHandle;

static uint16_t SWServW2STHandle;
static uint16_t ActivityRecCharHandle;
static uint16_t ConfigServW2STHandle;
static uint16_t ConfigCharHandle;

static uint16_t ConsoleW2STHandle;
static uint16_t StdErrCharHandle;

static uint8_t LastStderrBuffer[W2ST_CONSOLE_MAX_CHAR_LEN];
static uint8_t LastStderrLen;


static uint8_t  EnvironmentalCharSize=2; /* Size for Environmental BLE characteristic */

#ifndef USE_STM32L0XX_NUCLEO
static uint32_t SizeOfUpdateBlueFW=0;
#endif /* USE_STM32L0XX_NUCLEO */

static uint16_t connection_handle = 0;


static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle);
static void GAP_DisconnectionComplete_CB(void);
static uint32_t ConfigCommandParsing(uint8_t * att_data, uint8_t data_length);


#ifdef ACC_BLUENRG_CONGESTION
#define ACI_GATT_UPDATE_CHAR_VALUE safe_aci_gatt_update_char_value
static int32_t breath;

//=============================================================================================
/* @brief  Update the value of a characteristic avoiding (for a short time) to
 *         send the next updates if an error in the previous sending has
 *         occurred.
 * @param  servHandle The handle of the service
 * @param  charHandle The handle of the characteristic
 * @param  charValOffset The offset of the characteristic
 * @param  charValueLen The length of the characteristic
 * @param  charValue The pointer to the characteristic
 * @retval tBleStatus Status
 */
tBleStatus safe_aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
				      const uint8_t *charValue)
{
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
  
  if (breath > 0) {
    breath--;
  } else {
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
    
    if (ret != BLE_STATUS_SUCCESS){
      breath = ACC_BLUENRG_CONGESTION_SKIP;
    }
  }
  
  return (ret);
}

#else /* ACC_BLUENRG_CONGESTION */
#define ACI_GATT_UPDATE_CHAR_VALUE aci_gatt_update_char_value
#endif /* ACC_BLUENRG_CONGESTION */

//=============================================================================================
/**
 * @brief  Add the CONFIG SERVICE using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_ConfigW2ST_Service(void)
{
  tBleStatus ret;

  uint8_t uuid[16];

  COPY_CONFIG_SERVICE_UUID(uuid);
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS)
    goto fail;

  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &ConfigCharHandle);

  if (ret != BLE_STATUS_SUCCESS)
  {
    goto fail;
  }

  return BLE_STATUS_SUCCESS;

fail:
  term_printf("Error while adding Configuration service.\n");
  return BLE_STATUS_ERROR;
}


//=============================================================================================
/**
 * @brief  Update Stderr characteristic value
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */

tBleStatus Stderr_Update(uint8_t *data,uint8_t length)
{
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;


  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
    DataToSend = (length-Offset);
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;


    memcpy(LastStderrBuffer,data+Offset,DataToSend);
    LastStderrLen = DataToSend;

    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
    if (ret != BLE_STATUS_SUCCESS) {
      return BLE_STATUS_ERROR;
    }
    HAL_Delay(10);
  }

  return BLE_STATUS_SUCCESS;
}

//=============================================================================================
/**
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */

static tBleStatus Stderr_Update_AfterRead(void)
{
  tBleStatus ret;

  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
  if (ret != BLE_STATUS_SUCCESS)
  {
    return BLE_STATUS_ERROR;
  }

  return BLE_STATUS_SUCCESS;
}

//=============================================================================================
/**
 * @brief  Add the SW FEATURE SERVICE using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
  tBleStatus ret;
  int32_t NumberOfRecords=5;

  uint8_t uuid[16];

  /* Only for IDB05A1 */

  if(TargetBoardFeatures.bnrg_expansion_board == IDB05A1)
  {
    NumberOfRecords++;
  }

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3*NumberOfRecords,&SWServW2STHandle);

						  if (ret != BLE_STATUS_SUCCESS)
						  {
							goto fail;
						  }

  COPY_ACTIVITY_REC_W2ST_CHAR_UUID(uuid);
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &ActivityRecCharHandle);

						  if (ret != BLE_STATUS_SUCCESS)
						  {
							goto fail;
						  }

  return BLE_STATUS_SUCCESS;

fail:
  term_printf("Error while adding SW's Characteristcs service.\n");
  return BLE_STATUS_ERROR;
}

//=============================================================================================
/**
 * @brief  Add the HW FEATURE SERVICE using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
  tBleStatus ret;
  uint8_t uuid[16];

  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);			// SERVICE SENS
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
                          13,
                          &HWServW2STHandle);

				  if (ret != BLE_STATUS_SUCCESS)
				  {
					goto fail;
				  }
  

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
  if(TargetBoardFeatures.NumTempSensors==2)
  {
    uuid[14] |= 0x05; /* Two Temperature values*/
    EnvironmentalCharSize+=2*2;
  }
  else if(TargetBoardFeatures.NumTempSensors==1)
  {
    uuid[14] |= 0x04; /* One Temperature value*/
    EnvironmentalCharSize+=2;
  }

  if(TargetBoardFeatures.HandleHumSensor)
  {
   uuid[14] |= 0x08; /* Humidity */
   EnvironmentalCharSize+=2;
  }

  if(TargetBoardFeatures.HandlePressSensor)
  {
    uuid[14] |= 0x10; /* Pressure value*/
    EnvironmentalCharSize+=4;
  }
/*
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, EnvironmentalCharSize,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);

							  if (ret != BLE_STATUS_SUCCESS)
							  {
								goto fail;
							  }
*/

  COPY_HUMIDITY_CHAR_UUID(uuid);
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &HumidityCharHandle);

							  if (ret != BLE_STATUS_SUCCESS)
							  {
								goto fail;
							  }

COPY_TEMPERATURE_CHAR_UUID(uuid);
ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 4,
						    CHAR_PROP_NOTIFY|CHAR_PROP_READ,
						    ATTR_PERMISSION_NONE,
						    GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
						   16, 0, &TemperatureCharHandle);

														  if (ret != BLE_STATUS_SUCCESS)
														  {
															goto fail;
														  }
COPY_PRESSION_CHAR_UUID(uuid);
ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 4,
						    CHAR_PROP_NOTIFY|CHAR_PROP_READ,
						    ATTR_PERMISSION_NONE,
						   GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
						   16, 0, &PressionCharHandle);

																if (ret != BLE_STATUS_SUCCESS)
														  		 {
														  		goto fail;
														  		}




  return BLE_STATUS_SUCCESS;

fail:
  return BLE_STATUS_ERROR;
}

//=============================================================================================
/**
 * @brief  Update Environmental characteristic value
 * @param  int32_t Press Pressure in mbar
 * @param  uint16_t Hum humidity RH (Relative Humidity) in thenths of %
 * @param  int16_t Temp2 Temperature in tenths of degree second sensor
 * @param  int16_t Temp1 Temperature in tenths of degree first sensor
 * @retval tBleStatus   Status
 */
tBleStatus Environmental_Update(int32_t Press,uint16_t Hum,int16_t Temp2,int16_t Temp1)
{
  tBleStatus ret;
  uint8_t BuffPos;
  
  uint8_t buff[2+4/*Press*/+2/*Hum*/+2/*Temp2*/+2/*Temp1*/];

  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
  BuffPos=2;

  if(TargetBoardFeatures.HandlePressSensor)
  {
    STORE_LE_32(buff+BuffPos,Press);
    BuffPos+=4;
  }

  if(TargetBoardFeatures.HandleHumSensor)
  {
    STORE_LE_16(buff+BuffPos,Hum);
    BuffPos+=2;
  }

  if(TargetBoardFeatures.NumTempSensors==2)
  {
    STORE_LE_16(buff+BuffPos,Temp2);
    BuffPos+=2;
    
    STORE_LE_16(buff+BuffPos,Temp1);
    BuffPos+=2;
  }
  else if(TargetBoardFeatures.NumTempSensors==1)
  {
    STORE_LE_16(buff+BuffPos,Temp1);
    BuffPos+=2;
  }

//  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, EnvironmentalCharSize,buff);





  if (ret != BLE_STATUS_SUCCESS)
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
    {
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
      Stderr_Update(BufferToWrite,BytesToWrite);
    }
    else
    {
      term_printf("Error Updating Environmental Char\r\n");
    }
    return BLE_STATUS_ERROR;
  }
  return BLE_STATUS_SUCCESS;
}
//=============================================================================================
/**
 * @brief  Update LEDs characteristic value
 * @param  uint8_t LedStatus LEDs status 0/1 (off/on)
 * @retval tBleStatus   Status
 */
tBleStatus LED_Update(uint8_t LedStatus)
{
  tBleStatus ret;

  uint8_t buff[2+1];

  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
  buff[2] = LedStatus;

  ret = aci_gatt_update_char_value(HWServW2STHandle, LedCharHandle, 0, 2+1,buff);

  if (ret != BLE_STATUS_SUCCESS)
  {
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
    {
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating LED Char\r\n");
      Stderr_Update(BufferToWrite,BytesToWrite);
    }
    else
    {
      term_printf("Error Updating Temp Char\r\n");
    }
    return BLE_STATUS_ERROR;
  }
  return BLE_STATUS_SUCCESS;
}
//=============================================================================================

/**
 * @brief  Puts the device in connectable mode.
 * @param  None 
 * @retval None
 */
void setConnectable(void)
{  
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_BLUEMS};
  uint8_t manuf_data[26] = {
    2,0x0A,0x00 /* 0 dBm */, // Trasmission Power
    8,0x09,NAME_BLUEMS, // Complete Name
    13,0xFF,0x01/*SKD version */,
      0x80,
      0x00, /* LED */
      0x00, /* ACC+Gyro+Mag*/
      0x00, /*  */
      0x00, /*  */
      0x00, /* BLE MAC start */
      0x00,
      0x00,
      0x00,
      0x00,
      0x00, /* BLE MAC stop */
  };

  /* BLE MAC */
  manuf_data[20] = bdaddr[5];
  manuf_data[21] = bdaddr[4];
  manuf_data[22] = bdaddr[3];
  manuf_data[23] = bdaddr[2];
  manuf_data[24] = bdaddr[1];
  manuf_data[25] = bdaddr[0];

  manuf_data[16] |= 0x20; /* Led */

  if(TargetBoardFeatures.NumTempSensors==2)
  {
    manuf_data[17] |= 0x05; /* Two Temperature values*/
  }
  else if(TargetBoardFeatures.NumTempSensors==1)
  {
    manuf_data[17] |= 0x04; /* One Temperature value*/
  }

  if(TargetBoardFeatures.HandleHumSensor)
  {
    manuf_data[17] |= 0x08; /* Humidity */
  }

  if(TargetBoardFeatures.HandlePressSensor)
  {
    manuf_data[17] |= 0x10; /* Pressure value*/
  }
  
  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
  aci_gap_set_discoverable(ADV_IND, 0, 0,
#ifndef MAC_BLUEMS
  #ifdef MAC_STM32UID_BLUEMS
                           STATIC_RANDOM_ADDR,
  #else /* MAC_STM32UID_BLUEMS */
                           RANDOM_ADDR,
  #endif /* MAC_STM32UID_BLUEMS */
#else /* MAC_BLUEMS */
                           PUBLIC_ADDR,
#endif /* MAC_BLUEMS */
                           NO_WHITE_LIST_USE,
                           sizeof(local_name), local_name, 0, NULL, 0, 0);

  /* Send Advertising data */
  aci_gap_update_adv_data(26, manuf_data);
}
//=============================================================================================
/**
 * @brief  This function is called when there is a LE Connection Complete event.
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
  connection_handle = handle;

  term_printf("\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);

  ConnectionBleStatus=0;

  ForceReCalibration     =0;
  FirstConnectionConfig  =0;
}
//=============================================================================================
/**
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;

  /* Make the device connectable again. */
  set_connectable = TRUE;
  ConnectionBleStatus=0;
  ForceReCalibration     =0;
  FirstConnectionConfig  =0;

  /* Reset for any problem during FOTA update */
  SizeOfUpdateBlueFW = 0;

  if(HAL_TIM_Base_Stop_IT(&TimEnvHandle) != HAL_OK)
  {
    Error_Handler();
  }
}
//=============================================================================================
/**
 * @brief  This function is called when there is a Bluetooth Read request
 * @param  uint16_t handle Handle of the attribute
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
  uint8_t Status;  
  if(handle == EnvironmentalCharHandle + 1)
  {
    /* Read Request for Pressure,Humidity, and Temperatures*/
    float SensorValue;
    int32_t PressToSend=0;
    uint16_t HumToSend=0;
    int16_t Temp2ToSend=0,Temp1ToSend=0;
    int32_t decPart, intPart;

    if(TargetBoardFeatures.HandlePressSensor)
    {
			  if((TargetBoardFeatures.SnsAltFunc ? BSP_PRESSURE_IsInitialized_IKS01A2 : BSP_PRESSURE_IsInitialized)(TargetBoardFeatures.HandlePressSensor,&Status)==COMPONENT_OK)
			  {
				(TargetBoardFeatures.SnsAltFunc ? BSP_PRESSURE_Get_Press_IKS01A2 : BSP_PRESSURE_Get_Press)(TargetBoardFeatures.HandlePressSensor,(float *)&SensorValue);
				MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
				PressToSend=intPart*100+decPart;
			  }
    }

    if(TargetBoardFeatures.HandleHumSensor)
    {
			  if((TargetBoardFeatures.SnsAltFunc ? BSP_HUMIDITY_IsInitialized_IKS01A2 : BSP_HUMIDITY_IsInitialized)(TargetBoardFeatures.HandleHumSensor,&Status)==COMPONENT_OK)
			  {
				(TargetBoardFeatures.SnsAltFunc ? BSP_HUMIDITY_Get_Hum_IKS01A2 : BSP_HUMIDITY_Get_Hum)(TargetBoardFeatures.HandleHumSensor,(float *)&SensorValue);
				MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
				HumToSend = intPart*10+decPart;
			  }
    }

    if(TargetBoardFeatures.NumTempSensors==2)
    {
			  if((TargetBoardFeatures.SnsAltFunc ? BSP_TEMPERATURE_IsInitialized_IKS01A2 : BSP_TEMPERATURE_IsInitialized)(TargetBoardFeatures.HandleTempSensors[0],&Status)==COMPONENT_OK)
			  {
				(TargetBoardFeatures.SnsAltFunc ? BSP_TEMPERATURE_Get_Temp_IKS01A2 : BSP_TEMPERATURE_Get_Temp)(TargetBoardFeatures.HandleTempSensors[0],(float *)&SensorValue);
				MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
				Temp1ToSend = intPart*10+decPart;
			  }

			  if((TargetBoardFeatures.SnsAltFunc ? BSP_TEMPERATURE_IsInitialized_IKS01A2 : BSP_TEMPERATURE_IsInitialized)(TargetBoardFeatures.HandleTempSensors[1],&Status)==COMPONENT_OK)
			  {
				(TargetBoardFeatures.SnsAltFunc ? BSP_TEMPERATURE_Get_Temp_IKS01A2 : BSP_TEMPERATURE_Get_Temp)(TargetBoardFeatures.HandleTempSensors[1],(float *)&SensorValue);
				MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
				Temp2ToSend = intPart*10+decPart;
			  }
    }
    else
    if(TargetBoardFeatures.NumTempSensors==1)
    {
			  if((TargetBoardFeatures.SnsAltFunc ? BSP_TEMPERATURE_IsInitialized_IKS01A2 : BSP_TEMPERATURE_IsInitialized)(TargetBoardFeatures.HandleTempSensors[0],&Status)==COMPONENT_OK)
			  {
				(TargetBoardFeatures.SnsAltFunc ? BSP_TEMPERATURE_Get_Temp_IKS01A2 : BSP_TEMPERATURE_Get_Temp)(TargetBoardFeatures.HandleTempSensors[0],(float *)&SensorValue);
				MCR_BLUEMS_F2I_1D(SensorValue, intPart, decPart);
				Temp1ToSend = intPart*10+decPart;
			  }
    }
    Environmental_Update(PressToSend,HumToSend,Temp2ToSend,Temp1ToSend);
  }
  else
	  /*
  if(handle == LedCharHandle + 1)
  {
	LED_Update(TargetBoardFeatures.LedStatus); // Read Request for led status
  }
*/
  if (handle == StdErrCharHandle + 1)
  {
    /* Send again the last packet for StdError */
    Stderr_Update_AfterRead();
  }

  //EXIT:
  if(connection_handle != 0)
    aci_gatt_allow_read(connection_handle);
}
//=============================================================================================
/**
 * @brief  This function is called when there is a change on the gatt attribute
 * With this function it's possible to understand if one application 
 * is subscribed or not to the one service
 * @param uint16_t att_handle Handle of the attribute
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length) {

if(attr_handle == ConfigCharHandle + 2)
{
    if (att_data[0] == 01)
    {
      FirstConnectionConfig=1;
    }
    else if (att_data[0] == 0)
    {
      FirstConnectionConfig=0;
    }
 }

else if(attr_handle == AccEventCharHandle + 2)
{
    if (att_data[0] == 01)
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_ACC_EVENT);
    }
    else if (att_data[0] == 0)
    {
      W2ST_OFF_CONNECTION(W2ST_CONNECT_ACC_EVENT);
    }
}

else if(attr_handle == EnvironmentalCharHandle + 2)
{
    if (att_data[0] == 01)
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_ENV);
      if(HAL_TIM_Base_Start_IT(&TimEnvHandle) != HAL_OK)
      {
        Error_Handler();
      }
    }
	else if (att_data[0] == 0)
	{
		  W2ST_OFF_CONNECTION(W2ST_CONNECT_ENV);
		  if(HAL_TIM_Base_Stop_IT(&TimEnvHandle) != HAL_OK) 		  /* Stop the TIM Base generation in interrupt mode */
		  {
			Error_Handler();
		  }
	}
 }

else if(attr_handle == StdErrCharHandle + 2)
{
    if (att_data[0] == 01)
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
    }
    else if (att_data[0] == 0)
    {
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
    }
}

else if(attr_handle == LedCharHandle + 2)
  {
		if (att_data[0] == 01)
		{
		  W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
		  LED_Update(TargetBoardFeatures.LedStatus);  		  /* Update the LED feature */
		}
		else if (att_data[0] == 0)
		{
		  W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
		}
  }

  else if (attr_handle == ConfigCharHandle + 1)
		  {
			/* Received one write command from Client on Configuration characteristc */
			ConfigCommandParsing(att_data, data_length);
		  }
  else
  {
		if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
		{
		  BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
		  Stderr_Update(BufferToWrite,BytesToWrite);
		}
		else
		{
		  term_printf("Notification UNKNOW handle\r\n");
		}
  }
}

//===========================================================================================
/**
 * @brief  This function makes the parsing of the Configuration Commands
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval uint32_t SendItBack true/false
 */
static uint32_t ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
  uint8_t Command = att_data[4];
  uint8_t Data    = att_data[5];
  uint32_t SendItBack = 1;

  switch (FeatureMask) {

			case FEATURE_MASK_LED:

/*
								 switch(Command)
								 {
									  case 1:
										LedOnTargetPlatform();
										break;
									  case 0:
										LedOffTargetPlatform();
										break;
								 }

								 if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED))
								 {
								   LED_Update(TargetBoardFeatures.LedStatus);
								 }

								 */
								 break;
			/* Environmental features */
			case FEATURE_MASK_TEMP1:
			case FEATURE_MASK_TEMP2:
			case FEATURE_MASK_PRESS:
			case FEATURE_MASK_HUM:
			  switch(Command)
			  {
				case 255:
				  /* Change the Sending interval */
								  if(Data!=0)
								  {
									/* Multiple of 100mS */
									__HAL_TIM_SET_AUTORELOAD(&TimEnvHandle,(Data*200 - 1));
									__HAL_TIM_SET_COUNTER(&TimEnvHandle,0);
									TimEnvHandle.Instance->EGR = TIM_EGR_UG;

								  }
								  else
								  {
									/* Default Values */
									__HAL_TIM_SET_AUTORELOAD(&TimEnvHandle,(50*20 - 1));
									__HAL_TIM_SET_COUNTER(&TimEnvHandle,0);

								  }

								 SendItBack = 0;
								 break;
			  }
			break;
  }
  return SendItBack;
}

//===========================================================================================
/**
 * @brief  This function is called whenever there is an ACI event to be processed.
 * @note   Inside this function each event must be identified and correctly
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
  {
    return;
  }
  
  switch(event_pckt->evt)
	  {

	  case EVT_DISCONN_COMPLETE:
						{
						  GAP_DisconnectionComplete_CB();
						}
						break;
	  case EVT_LE_META_EVENT:
						{
								  evt_le_meta_event *evt = (void *)event_pckt->data;
								  switch(evt->subevent)
								  {
									  case EVT_LE_CONN_COMPLETE:
										{
										  evt_le_connection_complete *cc = (void *)evt->data;
										  GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
										}
										break;
								  }
						}
						break;
	  case EVT_VENDOR:
			{
				  evt_blue_aci *blue_evt = (void*)event_pckt->data;
				  switch(blue_evt->ecode)
				  {
					  case EVT_BLUE_GATT_READ_PERMIT_REQ:
						{
						  evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
						  Read_Request_CB(pr->attr_handle);
						}
						break;
					  case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
						if(TargetBoardFeatures.bnrg_expansion_board==IDB05A1)
						{
							  evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
							  Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
						}
						else
						{
							  evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
							  Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
						 }
						break;
				  }
			}
			break;
	  }
}
//===========================================================================================
